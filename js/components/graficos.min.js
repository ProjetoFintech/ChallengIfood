// Lógica para gráficos e saldos financeiros

// Placeholder para gráficos usando Chart.js
const ctx1 = document.getElementById('graficoDesempenho').getContext('2d');
const graficoDesempenho = new Chart(ctx1, {
    type: 'line',
    data: {
        labels: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'],
        datasets: [{
            label: 'Desempenho Financeiro',
            data: [12000, 15000, 13000, 17000, 16000, 18000],
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2
        }]
    },
});

const ctx2 = document.getElementById('graficoEntradasSaidas').getContext('2d');
const graficoEntradasSaidas = new Chart(ctx2, {
    type: 'bar',
    data: {
        labels: ['Entradas', 'Saídas'],
        datasets: [{
            label: 'Entradas',
            data: [25000, 15000],
            backgroundColor: ['rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],
            borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],
            borderWidth: 1
        }]
    },
});

// Dados de exemplo de produtos mais e menos vendidos
const produtosVendidosData = {
    labels: ['Pizza', 'Hambúrguer', 'Sushi', 'Salada', 'Bebida'],
    datasets: [{
        label: 'Quantidade Vendida',
        data: [500, 300, 200, 150, 100], // Exemplo de dados
        backgroundColor: [
            'rgba(75, 192, 192, 0.2)',
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(153, 102, 255, 0.2)'
        ],
        borderColor: [
            'rgba(75, 192, 192, 1)',
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(153, 102, 255, 1)'
        ],
        borderWidth: 1
    }]
};

// Criação do gráfico de produtos mais e menos vendidos
const ctxProdutosVendidos = document.getElementById('graficoProdutosVendidos').getContext('2d');
const graficoProdutosVendidos = new Chart(ctxProdutosVendidos, {
    type: 'bar',
    data: produtosVendidosData,
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        },
        responsive: true,
        plugins: {
            legend: {
                display: false
            }
        }
    }
});

// Dados de exemplo para o resumo financeiro
let saldoAtual = 5000;
let saldoReceber = 2000;
let totalDespesas = 1500;
let faturamentoBruto = 8000;
let lucro = saldoAtual + saldoReceber - totalDespesas;

// Função para atualizar os valores do Resumo Financeiro
function atualizarResumoFinanceiro() {
    document.getElementById('saldoAtual').textContent = `R$ ${saldoAtual.toFixed(2)}`;
    document.getElementById('saldoReceber').textContent = `R$ ${saldoReceber.toFixed(2)}`;
    document.getElementById('totalDespesas').textContent = `R$ ${totalDespesas.toFixed(2)}`;
    document.getElementById('faturamentoBruto').textContent = `R$ ${faturamentoBruto.toFixed(2)}`;
    document.getElementById('lucro').textContent = `R$ ${lucro.toFixed(2)}`;
}

// Chamar a função para preencher os dados do Resumo Financeiro
atualizarResumoFinanceiro();

// Dados de exemplo para o extrato resumido e completo
const extratoResumidoData = [
    { data: '01/09/2024', descricao: 'Pagamento de Cliente', valor: 2000, status: 'Concluído' },
    { data: '03/09/2024', descricao: 'Compra de Material', valor: -500, status: 'Pendente' },
    { data: '05/09/2024', descricao: 'Venda de Produto', valor: 1500, status: 'Concluído' },
    { data: '07/09/2024', descricao: 'Serviço de Entrega', valor: -300, status: 'Aguardando' },
];

// Atualizar o extrato resumido e recalcular os valores do resumo financeiro
function atualizarExtratoResumido() {
    const tabelaExtrato = document.querySelector('#tabela-extrato-resumido tbody');
    tabelaExtrato.innerHTML = ''; // Limpa a tabela antes de adicionar novos valores
    let totalRecebido = 0;
    let totalDespesasAcumuladas = 0;

    extratoResumidoData.forEach(item => {
        const linha = document.createElement('tr');
        const valor = item.valor >= 0 
            ? `<td class="text-success">R$ ${item.valor.toFixed(2)}</td>` 
            : `<td class="text-danger">R$ ${item.valor.toFixed(2)}</td>`;

        linha.innerHTML = `
            <td>${item.data}</td>
            <td>${item.descricao}</td>
            ${valor}
            <td><span class="badge ${getStatusClass(item.status)}">${item.status}</span></td>
        `;
        tabelaExtrato.appendChild(linha);

        // Acumular valores
        if (item.valor >= 0) {
            totalRecebido += item.valor;
        } else {
            totalDespesasAcumuladas += Math.abs(item.valor);
        }
    });

    // Atualiza o resumo financeiro com base no extrato resumido
    saldoReceber = totalRecebido;
    totalDespesas = totalDespesasAcumuladas;
    faturamentoBruto = saldoAtual + saldoReceber;
    lucro = saldoAtual + saldoReceber - totalDespesas;

    atualizarResumoFinanceiro();
}

// Função para classificar o status
function getStatusClass(status) {
    switch (status) {
        case 'Concluído':
            return 'bg-success';
        case 'Pendente':
            return 'bg-danger';
        case 'Aguardando':
            return 'bg-warning';
        default:
            return 'bg-secondary';
    }
}

// Inicializar a tabela do extrato resumido
atualizarExtratoResumido();